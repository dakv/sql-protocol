jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: ${{ parameters.vmImage }}
    strategy:
      matrix:
        stable:
          rustup_toolchain: stable
        beta:
          rustup_toolchain: beta
        nightly:
          rustup_toolchain: nightly
    steps:
      - ${{ if ne(parameters.name, 'Windows') }}:
          # Linux and macOS.
          - script: |
              export CARGO_HOME="$HOME/.cargo"
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
            displayName: Install rust
      - ${{ if eq(parameters.name, 'Windows') }}:
          # Windows.
          - script: |
              set CARGO_HOME=%USERPROFILE%\.cargo
              curl -sSf -o rustup-init.exe https://win.rustup.rs
              rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
              set PATH=%PATH%;%USERPROFILE%\.cargo\bin
              echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
            displayName: Install rust (windows)
      # All platforms.
      - script: |
          rustc -Vv
          cargo -V
        displayName: Query rust and cargo versions
      - ${{ if eq(parameters.name, 'Windows') }}:
          # Windows.
          - script: |
              set PATH=%PATH%;%USERPROFILE%\.cargo\bin
              cargo build && cargo build --release && cargo test && cargo test --release
            env: { CARGO_MAKE_RUN_CODECOV: true }
            displayName: Build and run tests
      - ${{ if ne(parameters.name, 'Windows') }}:
          # Not Windows.
          - script: |
              export PATH="$PATH:$HOME/.cargo/bin";
              cargo build && cargo build --release && cargo test && cargo test --release
            env: { CARGO_MAKE_RUN_CODECOV: true }
            displayName: Build and run tests